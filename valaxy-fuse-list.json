[{"title":"OpenWrt自动封禁爆破IP","tags":["openwrt","linux"],"categories":"Yr的学习","author":"YangRan","excerpt":"\n## 需求\n- OpenWrt没有自动封禁IP的功能，在GitHub找到遍历Log封禁IP脚本。\n\n### 个性化需求\n- 添加封禁IP脚本`DenyPwdHack.sh`（无邮件通知，且遍历logread系统日志。导致IP存在就会封禁无法过期删除。）\n- 配置封禁IP脚本`DenyPwdHack.sh`的遍历logread系统日志最后100行。\n- 添加封禁IP脚本`DenyPwdHack.sh`的封禁IP通知发送至邮箱。\n","link":"/posts/OpenWrt-ban-ip","content":"\n## 需求\n- OpenWrt没有自动封禁IP的功能，在GitHub找到遍历Log封禁IP脚本。\n\n### 个性化需求\n- 添加封禁IP脚本`DenyPwdHack.sh`（无邮件通知，且遍历logread系统日志。导致IP存在就会封禁无法过期删除。）\n- 配置封禁IP脚本`DenyPwdHack.sh`的遍历logread系统日志最后100行。\n- 添加封禁IP脚本`DenyPwdHack.sh`的封禁IP通知发送至邮箱。\n<!-- more -->\n\n### 安装邮件通知功能\n- OpenWrt安装msmtp、mutt。\n- msmtp添加发送邮件功能。\n- mutt邮件客户端，使邮件正常发送，对端不误报垃圾邮件。\n\n#### 配置msmtp\n- `vim /etc/msmtprc`\n\n```php\n# Example for a system wide configuration file\n\n# A system wide configuration file is optional.\n# If it exists, it usually defines a default account.\n# This allows msmtp to be used like /usr/sbin/sendmail.\naccount default\n\n# The SMTP smarthost\nhost smtp.163.com // 163邮箱smtp地址\n\n# Use TLS on port 465\nport 465\ntls on\ntls_starttls off\n\n# Construct envelope-from addresses of the form \"user@oursite.example\"\nfrom xxxxxxxx@163.com // 邮件的发件方地址\nauth login // 自动登录\nuser xxxxxxxx@163.com // 邮箱用户名，有些是不要@邮箱地址\npassword XXXXXXXXXXXXX // 邮箱开启SMTP给的授权码\n\n\n# Syslog logging with facility LOG_MAIL instead of the default LOG_USER\nlogfile /etc/msmtp.log\n```\n\n\n#### 配置mutt\n- `vim /etc/Muttrc`\n\n```php\nset charset=\"utf-8\"\n\nset rfc2047_parameters=yes\n\nset envelope_from=yes\n\nset sendmail=\"/usr/bin/msmtp\" //发邮件的程序\n\nset use_from=yes\n\nset from=xxxxxxxx@163.com //发件方\n\nset realname=\"OpenWrt\" //发件方名称\n\nset editor=\"vim\"\n```\n\n## 项目地址\n- [项目地址](https://github.com/xwsnet/deny-ssh-password-attack)\n\n## 初始源码\n\n```php\n#!/bin/ash\n\n\n## OpenWRT 版本判断\nVfile=/etc/banner\nOWTV=`awk 'BEGIN{IGNORECASE=1}/openwrt/ {split($2,v,\".\"); print v[1]}' $Vfile`\n[[ $OWTV -lt 18 ]] && echo \"OpenWRT version must be >= 18\" && exit 1\n\n\n## 黑名单所在iptables链表\nChainName=DenyPwdHack\n\n\n## 日志路径\nLOG_DEST=/tmp/DenyPwdHack.log\n\n\n## 检测到攻击时需要针对攻击IP封禁的端口,可以将ssh/luci/ftp等端口加上\nDeny_Port=\"22,443\"\nINPUT_RULE=\"INPUT -p tcp -m multiport --dports $Deny_Port -j $ChainName\"\n\n\n## 日志关键字,每个关键字可以用\"|\"号隔开,支持grep的正则表达式\n\n## 注: SSH 攻击可以大量出现四种关键字：Invalid user/Failed password for/Received disconnect from/Disconnected from authenticating\n\n##     Luci 攻击可以出现\"luci: failed login on / for root from xx.xx.xx.xx\"\nLOG_KEY_WORD=\"auth\\.info\\s+sshd.*Failed password for|luci:\\s+failed\\s+login|auth\\.info.*sshd.*Connection closed by.*port.*preauth\"\n\n\n## 白名单IP可以用\"|\"号隔开,支持grep的正则表达式\nexclude_ip=\"192.168.|127.0.0.1\"\n\n\n## 失败次数\nFailed_times=5\n\n\n## 黑名单过期时间,单位小时,3个月2160小时\nBlackList_exp=2160\n\n\n## 日志时间\nLOG_DT=`date \"+%Y-%m-%d %H:%M:%S\"`\n\n\n## 判断链是否存在\niptables -n --list $ChainName > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -N $ChainName\n  echo \"[$LOG_DT] iptables -N $ChainName\" >> $LOG_DEST\nfi\n\n\n## 判断INPUT跳到链的规则是否存在\niptables -C $INPUT_RULE > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -I $INPUT_RULE\n  echo \"[$LOG_DT] iptables -I $INPUT_RULE\" >> $LOG_DEST\nfi\n\nDenyIPLIst=`logread \\\n  | awk '/'\"$LOG_KEY_WORD\"'/ {for(i=1;i<=NF;i++) \\\n  if($i~/^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/) \\\n  print $i}' \\\n  | grep -v \"${exclude_ip}\" \\\n  | sort | uniq -c \\\n  | awk '{if($1>'\"$Failed_times\"') print $2}'`\nIPList_sum=`echo \"${DenyIPLIst}\" | wc -l`\nif [[ $IPList_sum -ne 0 ]];then\n  for i in ${DenyIPLIst}\n    do\n    iptables -vnL $ChainName | grep -q $i\n    [[ $? -ne 0 ]] && iptables -A $ChainName -s $i -m comment --comment \"Added at $LOG_DT by DenyPwdHack\" -j DROP \\\n     && echo \"[$LOG_DT] iptables -A $ChainName -s $i -j DROP\" >> $LOG_DEST\n    done\nfi\n\n\n## 黑名单过期删除\nChainList=`iptables --line-numbers -nL $ChainName |\\\n  awk '/Added at/ {for(i=1;i<=NF;i++) if($i~/[0-9]{4}(-[0-9]{2}){2}/) print $1\",\"$i\" \"$(i+1)}' |\\\n  sort -rn`\n\n\n## 链表必须从后端删除,如果从前端删除,后端的实际rulenum会变\nChainList_num=`echo \"${ChainList}\" | grep -v \"^$\" | wc -l`\nif [[ ${#ChainList} -ne 0 ]] && [[ $ChainList_num -gt 0 ]] ; then\nfor tl in `seq 1 $ChainList_num`\ndo\n  Dtime=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $2}'`\n  Stime=`date -d \"$Dtime\" +%s`\n  Ntime=`date +%s`\n  if [[ $(($Ntime - $Stime)) -ge $(($BlackList_exp * 3600)) ]] ; then\n    RuleNum=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $1}'`\n    iptables -D $ChainName $RuleNum\n    if [[ $? -eq 0 ]] ; then\n      echo \"[$LOG_DT] iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    else\n      echo \"[$LOG_DT] execute delete failed: iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    fi\n  fi\ndone\nfi\n\n```\n\n## 实际使用源码（邮件通知BUG，后续修复）\n\n\n### 添加修改自定义功能\n\n#### 读取logread系统日志最后100行\n\n```php\n#!/bin/bash\n\n# 获取文件最后100行数据\ntail -n -100 /tmp/system.log\n```\n\n### 封禁IP通知发送至邮箱\n```php\n\n## 通知邮件发送\nif [[ $? -eq 0 ]] ; then //判断上一步命令（封禁IP或初始创建iptables链）是否成功，成功则发送邮件\n  # 获取文件包含“iptables -A DenyPwdHack -s”且读取最后10行\n  DenyIpList=`cat /root/DenyPwdHack.log | grep \"iptables -A DenyPwdHack -s\" | tail -n -10`\n\n  # 发送至个人邮箱\n  echo \"$DenyIpList\" | mutt -s \"IP封禁提醒\" xxxxxxxx@qq.com\nfi\n```\n\n\n\n### DenyPwdHack.sh（集成自定义功能版）\n\n```php\n#!/bin/ash\n\n\n## OpenWRT 版本判断\n\n## Vfile=/etc/banner\n\n## OWTV=`awk 'BEGIN{IGNORECASE=1}/openwrt/ {split($2,v,\".\"); print v[1]}' $Vfile`\n\n## [[ $OWTV -lt 18 ]] && echo \"OpenWRT version must be >= 18\" && exit 1\n\n\n## 黑名单所在iptables链表\nChainName=DenyPwdHack\n\n\n## 日志路径\nLOG_DEST=/root/DenyPwdHack.log\n\n\n## 检测到攻击时需要针对攻击IP封禁的端口,可以将ssh/luci/ftp等端口加上\nDeny_Port=\"36875\"\nINPUT_RULE=\"INPUT -p tcp -m multiport --dports $Deny_Port -j $ChainName\"\n\n\n## 日志关键字,每个关键字可以用\"|\"号隔开,支持grep的正则表达式\n\n## 注: SSH 攻击可以大量出现四种关键字：Invalid user/Failed password for/Received disconnect from/Disconnected from authenticating\n\n##     Luci 攻击可以出现\"luci: failed login on / for root from xx.xx.xx.xx\"\nLOG_KEY_WORD=\"auth\\.info\\s+sshd.*Failed password for|luci:\\s+failed\\s+login|auth\\.info.*sshd.*Connection closed by.*port.*preauth|Received disconnect from\"\n\n\n## 白名单IP可以用\"|\"号隔开,支持grep的正则表达式\nexclude_ip=\"192.168.\\|127.0.0.1\\|112.45.125.\"\n\n\n## 失败次数\nFailed_times=10\n\n\n## 黑名单过期时间,单位分钟\nBlackList_exp=20\n\n\n## 日志时间\nLOG_DT=`date \"+%Y-%m-%d %H:%M:%S\"`\n\n\n## 判断链是否存在\niptables -n --list $ChainName > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -N $ChainName\n  echo \"[$LOG_DT] iptables -N $ChainName\" >> $LOG_DEST\nfi\n\n\n## 判断INPUT跳到链的规则是否存在\niptables -C $INPUT_RULE > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -I $INPUT_RULE\n  echo \"[$LOG_DT] iptables -I $INPUT_RULE\" >> $LOG_DEST\nfi\n\nDenyIPLIst=`tail -n -100 /tmp/system.log \\\n  | awk '/'\"$LOG_KEY_WORD\"'/ {for(i=1;i<=NF;i++) \\\n  if($i~/^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/) \\\n  print $i}' \\\n  | grep -v \"${exclude_ip}\" \\\n  | sort | uniq -c \\\n  | awk '{if($1>'\"$Failed_times\"') print $2}'`\nIPList_sum=`echo \"${DenyIPLIst}\" | wc -l`\nif [[ $IPList_sum -ne 0 ]];then\n  for i in ${DenyIPLIst}\n    do\n    iptables -vnL $ChainName | grep -q $i\n    [[ $? -ne 0 ]] && iptables -A $ChainName -s $i -m comment --comment \"Added at $LOG_DT by DenyPwdHack\" -j DROP \\\n     && echo \"[$LOG_DT] iptables -A $ChainName -s $i -j DROP\" >> $LOG_DEST\n    done\nfi\n\n\n## 通知邮件发送\nif [[ $? -eq 0 ]] ; then\n  # 获取文件包含“iptables -A DenyPwdHack -s”\n  DenyIpList=`cat /root/DenyPwdHack.log | grep \"iptables -A DenyPwdHack -s\" | tail -n -10`\n\n  # 发送至个人邮箱\n  echo \"$DenyIpList\" | mutt -s \"IP封禁提醒\" xxxxxxxx@qq.com\nfi\n\n\n## 黑名单过期删除\nChainList=`iptables --line-numbers -nL $ChainName |\\\n  awk '/Added at/ {for(i=1;i<=NF;i++) if($i~/[0-9]{4}(-[0-9]{2}){2}/) print $1\",\"$i\" \"$(i+1)}' |\\\n  sort -rn`\n\n\n## 链表必须从后端删除,如果从前端删除,后端的实际rulenum会变\nChainList_num=`echo \"${ChainList}\" | grep -v \"^$\" | wc -l`\nif [[ ${#ChainList} -ne 0 ]] && [[ $ChainList_num -gt 0 ]] ; then\nfor tl in `seq 1 $ChainList_num`\ndo\n  Dtime=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $2}'`\n  Stime=`date -d \"$Dtime\" +%s`\n  Ntime=`date +%s`\n  if [[ $(($Ntime - $Stime)) -ge $(($BlackList_exp * 60)) ]] ; then\n    RuleNum=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $1}'`\n    iptables -D $ChainName $RuleNum\n    if [[ $? -eq 0 ]] ; then\n      echo \"[$LOG_DT] iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    else\n      echo \"[$LOG_DT] execute delete failed: iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    fi\n  fi\ndone\nfi\n\n\n```\n\n\n### 添加计划任务\n\n- `*/10 * * * * /root/DenyPwdHack.sh`\n\n\n### 查询\n\n\n#### 封堵日志\n\n- `cat DenyPwdHack.log`\n\n#### 查询iptables条目\n\n- `iptables -L DenyPwdHack`\n\n#### 删除链\n\n- `iptables -D DenyPwdHack 1`\n\n## 邮件通知BUG修复\n- 运行一段发现，在无封禁IP时，任然触发邮件通知。\n\n\n### 改进\n- 改变增加iptables DenyPwdHack条目的日志位置。\n- shell判断文件MD5是否有变化。\n\n\n### 检测MD5脚本\n\n```php\n#!/bin/bash\n\n## 检测DenyPwdHackIP.log是否有新增IP。发送通知邮件\n#读取封禁IP日志\nDenyIpList=$(cat /root/DenyPwdHackIP.log)\ncd /root\n#判断DenyPwdHackIP.log文件有无改变，如果改变了需要发送通知邮件\nmd5_old=`cat DenyPwdHackIP.md5`\nmd5_new=`md5sum DenyPwdHackIP.log |awk '{print $1}'`\nif [[ $md5_old != $md5_new ]];then\n  echo \"$md5_new\" > DenyPwdHackIP.md5\n  echo \"$DenyIpList\" | mutt -s \"IP封禁提醒\" xxxxxxxx@qq.com\nfi\n```\n\n\n### DenyPwdHack.sh（改进后命令）\n\n```php\n#!/bin/bash\n\n\n## OpenWRT 版本判断\n\n## Vfile=/etc/banner\n\n## OWTV=`awk 'BEGIN{IGNORECASE=1}/openwrt/ {split($2,v,\".\"); print v[1]}' $Vfile`\n\n## [[ $OWTV -lt 18 ]] && echo \"OpenWRT version must be >= 18\" && exit 1\n\n\n## 黑名单所在iptables链表\nChainName=DenyPwdHack\n\n\n## 日志路径\nLOG_Deny_IP=/root/DenyPwdHackIP.log\nLOG_DEST=/root/DenyPwdHack.log\n\n\n## 检测到攻击时需要针对攻击IP封禁的端口,可以将ssh/luci/ftp等端口加上\nDeny_Port=\"36875\"\nINPUT_RULE=\"INPUT -p tcp -m multiport --dports $Deny_Port -j $ChainName\"\n\n\n## 日志关键字,每个关键字可以用\"|\"号隔开,支持grep的正则表达式\n\n## 注: SSH 攻击可以大量出现四种关键字：Invalid user/Failed password for/Received disconnect from/Disconnected from authenticating\n\n##     Luci 攻击可以出现\"luci: failed login on / for root from xx.xx.xx.xx\"\nLOG_KEY_WORD=\"auth\\.info\\s+sshd.*Failed password for|luci:\\s+failed\\s+login|auth\\.info.*sshd.*Connection closed by.*port.*preauth|Received disconnect from\"\n\n\n## 白名单IP可以用\"|\"号隔开,支持grep的正则表达式\nexclude_ip=\"192.168.\\|127.0.0.1\\|112.45.125.\"\n\n\n## 失败次数\nFailed_times=10\n\n\n## 黑名单过期时间,单位分钟\nBlackList_exp=20\n\n\n## 日志时间\nLOG_DT=`date \"+%Y-%m-%d %H:%M:%S\"`\n\n\n## 判断链是否存在\niptables -n --list $ChainName > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -N $ChainName\n  echo \"[$LOG_DT] iptables -N $ChainName\" >> $LOG_DEST\nfi\n\n\n## 判断INPUT跳到链的规则是否存在\niptables -C $INPUT_RULE > /dev/null 2>&1\nif [[ $? -ne 0 ]] ; then\n  iptables -I $INPUT_RULE\n  echo \"[$LOG_DT] iptables -I $INPUT_RULE\" >> $LOG_DEST\nfi\n\nDenyIPLIst=`tail -n -100 /tmp/system.log \\\n  | awk '/'\"$LOG_KEY_WORD\"'/ {for(i=1;i<=NF;i++) \\\n  if($i~/^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/) \\\n  print $i}' \\\n  | grep -v \"${exclude_ip}\" \\\n  | sort | uniq -c \\\n  | awk '{if($1>'\"$Failed_times\"') print $2}'`\nIPList_sum=`echo \"${DenyIPLIst}\" | wc -l`\nif [[ $IPList_sum -ne 0 ]];then\n  for i in ${DenyIPLIst}\n    do\n    iptables -vnL $ChainName | grep -q $i\n    [[ $? -ne 0 ]] && iptables -A $ChainName -s $i -m comment --comment \"Added at $LOG_DT by DenyPwdHack\" -j DROP \\\n     && echo \"[$LOG_DT] iptables -A $ChainName -s $i -j DROP\" >> $LOG_Deny_IP\n    done\nfi\n\n\n## 黑名单过期删除\nChainList=`iptables --line-numbers -nL $ChainName |\\\n  awk '/Added at/ {for(i=1;i<=NF;i++) if($i~/[0-9]{4}(-[0-9]{2}){2}/) print $1\",\"$i\" \"$(i+1)}' |\\\n  sort -rn`\n\n\n## 链表必须从后端删除,如果从前端删除,后端的实际rulenum会变\nChainList_num=`echo \"${ChainList}\" | grep -v \"^$\" | wc -l`\nif [[ ${#ChainList} -ne 0 ]] && [[ $ChainList_num -gt 0 ]] ; then\nfor tl in `seq 1 $ChainList_num`\ndo\n  Dtime=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $2}'`\n  Stime=`date -d \"$Dtime\" +%s`\n  Ntime=`date +%s`\n  if [[ $(($Ntime - $Stime)) -ge $(($BlackList_exp * 60)) ]] ; then\n    RuleNum=`echo \"${ChainList}\" | sed -n ''\"$tl\"'p' | awk -F, '{print $1}'`\n    iptables -D $ChainName $RuleNum\n    if [[ $? -eq 0 ]] ; then\n      echo \"[$LOG_DT] iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    else\n      echo \"[$LOG_DT] execute delete failed: iptables -D $ChainName $RuleNum\" >> $LOG_DEST\n    fi\n  fi\ndone\nfi\n\n\n## 检测DenyPwdHackIP.log是否有新增IP。发送通知邮件\n#读取封禁IP日志\nDenyIpList=$(cat /root/DenyPwdHackIP.log | tail -n -10)\ncd /root\n#判断DenyPwdHackIP.log文件有无改变，如果改变了需要发送通知邮件\nmd5_old=`cat DenyPwdHackIP.md5`\nmd5_new=`md5sum DenyPwdHackIP.log |awk '{print $1}'`\nif [[ $md5_old != $md5_new ]];then\n  echo \"$md5_new\" > DenyPwdHackIP.md5\n  echo \"$DenyIpList\" | mutt -s \"IP封禁提醒\" xxxxxxxx@qq.com\nfi\n```\n\n---\n#openwrt #linux "},{"title":"成都情歌","tags":["音乐"],"categories":"Yr的分享","author":"YangRan","excerpt":"\n<meting-js\n id=\"32807689\"\n server=\"netease\"\n type=\"song\"\n theme=\"#C20C0C\">\n</meting-js>\n\n<center>\n\n> 词：陈彦坤KE/唐嘉/陈柯右\n\n> 曲：陈彦坤KE/唐嘉/陈柯右\n\n我不知道这是不是RedCrew的最后一首歌\n\n但坤哥唐嘉永远是我内心最diao的Rap\n\n祝我坤哥新婚快乐以后生活会越来越好\n\n我站在1227灯火阑珊的成都\n\n放空的心情安静下来会有些许感触\n\n多整理一些感悟放慢追逐的脚步\n\n或许早就该停在原地调整自己角度\n\n","link":"/posts/chengdu-song","content":"\n<meting-js\n id=\"32807689\"\n server=\"netease\"\n type=\"song\"\n theme=\"#C20C0C\">\n</meting-js>\n\n<center>\n\n> 词：陈彦坤KE/唐嘉/陈柯右\n\n> 曲：陈彦坤KE/唐嘉/陈柯右\n\n我不知道这是不是RedCrew的最后一首歌\n\n但坤哥唐嘉永远是我内心最diao的Rap\n\n祝我坤哥新婚快乐以后生活会越来越好\n\n我站在1227灯火阑珊的成都\n\n放空的心情安静下来会有些许感触\n\n多整理一些感悟放慢追逐的脚步\n\n或许早就该停在原地调整自己角度\n\n<!-- more -->\n\n我想忘记那些年积累的阅历经验\n\n重来一遍见到的不会是老板臭脸\n\n看一眼沿途的风景哪怕路途遥远\n\n只要为了完美景色管它危不危险\n\n我选择安静的唱你选择安静的听\n\n我重新开始生活因为过去太不小心\n\n过去的列车是被人安排好的路径\n\n未来的生活需要一步按上一个脚印\n\n深夜的呼喊表达自己给自己回应\n\n太多人选择大路而我选择幽暗小径\n\n当会有那么一天自己不再年轻\n\n这首成都情歌到底还有谁会在听\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n\n有很多的城市我曾到过\n\n每一个都会有快乐欢笑和难过\n\n我们相遇成都故事汇成一本书\n\n在不同的地界段有相同的感触\n\n这是唐嘉i from RedCrew\n\n对所有帮助我的人向他们salute\n\n即使路还很长却还是在坚持\n\n至少我会拿到那把青睐已久的钥匙\n\n写首成都情歌也请你附和\n\n呼吸同样的空气感受同样温热\n\n在某条街道也许留下走过的足迹\n\n虽只待了几天却是永不忘的记忆\n\n在每个人的心里都会有一条桥\n\n越过每个障碍就能看到拂晓\n\n当会有那么一天自己不再年轻\n\n这首成都情歌还会有谁会在听\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n\n去不同城市旅行观赏每个地方风景\n\n听这是RedCrew在成都留下的声音\n\n总太感性处理不好琐碎的感情\n\n一段旅行每段回忆讲诉每种曾经\n\n带着干净的心感受这儿的风俗习惯\n\n对好的事物向往那是每个人的期盼\n\n漫无目的走过好多冤枉路\n\n因为面子问题没能说个不\n\n我喜欢我习惯这成都的夜晚\n\n这世界怎么了不该我管的都不管\n\n坐着地铁经过这是哪一站\n\n一起听着成都情歌和你的另一半\n\n逛着大街小巷这感觉多棒\n\n一座城市的故事当然不止在星座书上\n\n当然会有那么一天自己不再年轻\n\n这首成都情歌还会有谁会在听\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n\n这是一首发生在成都的情歌\n\n三个人的心事这首来听我说\n\n格外喧哗的夜人流熙攘的街\n\n我们只想写一首情歌来让你了解\n\n这是一首要离开成都的情歌\n\n太多的回忆被风吹进了角落\n\n三点半的机场车少人来人往\n\n只想写首歌唱十年后他是否变样\n</center>\n\n---\n#音乐 "},{"title":"Linux网卡绑定","tags":["linux"],"categories":"Yr的学习","author":"YangRan","excerpt":"## bond概念\n将两张网卡绑定，共用一个IP，实现冗余效果。实际上Linux双网卡的绑定模式有7种，而在这里常用的是active-backup，一个设备如果只有一个网卡，那么当这个网卡损坏时设备的网络就会瘫痪。绑定接口的作用就是让多个物理网卡服务于一个IP地址，使得这个网络的抵抗性强。一个设备只能有一个bound接口，配置好以后每个网卡需要一根网线，需要插两个网线，交换机也需要做链路聚合。  \n","link":"/posts/linux-bond","content":"## bond概念\n将两张网卡绑定，共用一个IP，实现冗余效果。实际上Linux双网卡的绑定模式有7种，而在这里常用的是active-backup，一个设备如果只有一个网卡，那么当这个网卡损坏时设备的网络就会瘫痪。绑定接口的作用就是让多个物理网卡服务于一个IP地址，使得这个网络的抵抗性强。一个设备只能有一个bound接口，配置好以后每个网卡需要一根网线，需要插两个网线，交换机也需要做链路聚合。  \n<!-- more -->\n\n1. mode=0(balance-rr)(平衡抡循环策略)\n\t- 链路负载均衡，增加带宽，支持容错，一条链路故障会自动切换正常链路。交换机需要配置聚合口，思科叫port channel。\n\t- 特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降\n \n2. mode=1(active-backup)(主-备份策略)\n\t- 这个是主备模式，只有一块网卡是active，另一块是备用的standby，所有流量都在active链路上处理，交换机配置的是捆绑的话将不能工作，因为交换机往两块网卡发包，有一半包是丢弃的。\n\t- 特点：只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有 N 个网络接口的情况下，资源利用率为1/N\n \n3. mode=2(balance-xor)(平衡策略)\n\t- 表示XOR Hash负载分担，和交换机的聚合强制不协商方式配合。（需要xmit_hash_policy，需要交换机配置port channel）\n\t- 特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力\n \n4. mode=3(broadcast)(广播策略)\n\t- 表示所有包从所有网络接口发出，这个不均衡，只有冗余机制，但过于浪费资源。此模式适用于金融行业，因为他们需要高可靠性的网络，不允许出现任何问题。需要和交换机的聚合强制不协商方式配合。\n\t- 特点：在每个slave接口上传输每个数据包，此模式提供了容错能力\n \n5. mode=4(802.3ad)(IEEE 802.3ad 动态链接聚合)\n\t- 表示支持802.3ad协议，和交换机的聚合LACP方式配合（需要xmit_hash_policy）.标准要求所有设备在聚合操作时，要在同样的速率和双工模式，而且，和除了balance-rr模式外的其它bonding负载均衡模式一样，任何连接都不能使用多于一个接口的带宽。\n\t- 特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。\n\t- 必要条件：\n\t\t条件1：ethtool支持获取每个slave的速率和双工设定\n\t\t条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation\n\t\t条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式\n \n6. mode=5(balance-tlb)(适配器传输负载均衡)\n\t- 是根据每个slave的负载情况选择slave进行发送，接收时使用当前轮到的slave。该模式要求slave接口的网络设备驱动有某种ethtool支持；而且ARP监控不可用。\n\t- 特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。\n\t- 必要条件：\n\t\tethtool支持获取每个slave的速率\n7. mode=6(balance-alb)(适配器适应性负载均衡)\n\t- 在5的tlb基础上增加了rlb(接收负载均衡receive load balance).不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的.\n\t- 特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达 时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播 ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新 （ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（round robin）在bond中最高速的slave上当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答 不会被switch(交换机)阻截。\n\n## linux有七种网卡绑定模式\n\n0. round robin\n1. active-backup\n2. load balancing (xor)\n3. fault-tolerance (broadcast)\n4. lacp\n5. transmit load balancing\n6. adaptive load balancing\n\n```php\nmode=0 表示 load balancing (round-robin)为负载均衡方式，两块网卡都工作。\nmode=1 表示 fault-tolerance (active-backup)提供冗余功能，工作方式是主 从的工作方式,也就是说默认情况下只有一块网卡工作,另一块做备份。  \nmode=2 表示 XOR policy 为平衡策略。此模式提供负载平衡和容错能力  \nmode=3 表示 broadcast 为广播策略。此模式提供了容错能力  \nmode=4 表示 IEEE 802.3ad Dynamic link aggregation 为 IEEE 802.3ad 为 动态链接聚合。该策略可以通过 xmit_hash_policy 选项从缺省的 XOR 策略改变到其他策略。  \nmode=5 表示 Adaptive transmit load balancing 为适配器传输负载均衡。该 模式的必要条件：ethtool 支持获取每个 slave 的速率  \nmode=6 表示 Adaptive load balancing 为适配器适应性负载均衡。该模式包含 了 balance-tlb 模式，同时加上针对 IPV4 流量的接收负载均衡(receive load   balance, rlb)，而且不需要任何 switch(交换机)的支持。\n```\n\n## 配置方法\n- Centeros7下面的网卡绑定有2种方式，一种是team，一种是bond\n- 实现方式有三种\n\n### 命令行方式\n- Bond命令行实现方式\n```php\nnmcli connection add type bond con-name bond0 ifname bond0 mode active-backup ipv4.method manual ipv4.addresses 10.68.15.56/24 ipv4.dns 114.114.114.144 ipv4.gateway 10.68.15.254  #将ip地址，网关修改为目标网络规划的ip地址\n\nnmcli connection add con-name bond-slave0 type bond-slave ifname eno3 master bond0#实体网卡对应绑定\n\nnmcli connection add con-name bond-slave1 type bond-slave ifname eno4 master bond0#实体网卡对应绑定\n\nnmcli connection up bond-slave0 #启用实体网卡对应的虚拟网卡\n\nnmcli connection up bond-slave1#启用实体网卡对应的虚拟网卡\n\nnmcli connection up bond0 #启动绑定\n```\n\n- team命令行实现方式\n\n```php\nnmcli connection add type team con-name team0 ifname agg-eth0 config '{\"runner\":{\"name\":\"activebackup\"}}' #创建 team 口 ,  con-name team0 ,  con-name team0 \n\nnmcli con add type team con-name CNAME ifname INAME [config JSON] #创建连接\n\nnmcli connection modify team0 ipv4.addresses \"192.168.1.250/24\"  #给team0 配置IP Gateway DNS\n\nnmcli connection modify team0 ipv4.gateway \"192.168.1.1\"\n\nnmcli connection modify team0 ipv4.dns \"192.168.1.1\"\n\nnmcli connection modify team0 ipv4.method manual\n\nnmcli connection add type team-slave con-name team0-port1 ifname ens37 master team0   #将 ens37 ens38 加入team0,\n\nnmcli connection add type team-slave con-name team0-port2 ifname ens38 master team0\n\nnmcli connection up team0 #激活 team0  team0-port1 team0-port2\n\nnmcli connection up team0-port1\n\nnmcli connection up team0-port2\n```\n虽然team和bond都可以实现网卡绑定，但是bond仅支持双网口，team组最多支持8个网口\n\n\n### nmtui\n- 半图形界面工具 \n- 在终端键入nmtui后，弹出半图形化管理方式\n- 选择编辑连接，弹出下面的界面，然后点添加选择绑定，或者组队\n- 然后在弹出界面设置bond，或者team（绑定物理网卡前记好需绑定的网卡名称，然后删除网卡后在绑定）\n\n### 图形化\n略\n\n\n#linux "},{"title":"Linux系统批量安装","tags":["linux"],"categories":"Yr的学习","author":"YangRan","excerpt":"## PXE批量系统安装\n### 实验环境搭建\n>[第十九讲](https://www.bilibili.com/video/BV1QK4y1v7sn?spm_id_from=333.999.0.0&vd_source=f6084efc3a58368dd53ce40762a1514a)\n### 无人值守安装\n>[第二十讲](https://www.bilibili.com/video/BV1ZV411z7Vp?share_source=copy_web&vd_source=58c00d10f6293fd8d6cf9b5061c57f5e)\n","link":"/posts/linux-pxe","content":"## PXE批量系统安装\n### 实验环境搭建\n>[第十九讲](https://www.bilibili.com/video/BV1QK4y1v7sn?spm_id_from=333.999.0.0&vd_source=f6084efc3a58368dd53ce40762a1514a)\n### 无人值守安装\n>[第二十讲](https://www.bilibili.com/video/BV1ZV411z7Vp?share_source=copy_web&vd_source=58c00d10f6293fd8d6cf9b5061c57f5e)\n<!-- more -->\n\n### Centos7 pxe 服务准备\n1. 关闭防火墙 \n `systemctl stop firewalld.service`\n \n2. 关闭selinux\n `setenforce 0 //临时关闭`\n\n3. 查看光盘是否连接\n `lsblk`\n\n4. 配置yum源\n- Red Hat 企业版需更换centos源\n- `cd /etc/yum.repos.d`\n- `rename .repo .bak *.repo //修改初始yum源文件`\n- 挂载本地yum源\n- `mkdir  /mnt/cdrom`\n- `mount /dev/sr0 /mnt/cdrom`\n\t```php\n\ttee >/etc/yum.repos.d/local.repo<<EOF \n\t[mnt]\n\tname=mnt\n\tbaseurl=file:///mnt/cdrom\n\tenabled=1\n\tgpgcheck=0\n\tEOF\n\t```\n- `yum clean all && yum makecache`\n\n5. 安装dhcp、tftp-server、http、syslinux\n- `yum -y install dhcp tftp-server httpd syslinux`\n\n6. 开启dhcp服务\n- `vi /etc/dhcp/dhcpd.conf` \n- 修改dhcp配置\n```php\nsubnet 192.168.192.0 netmask 255.255.255.0 { \n        range 192.168.192.2 192.168.192.253; \n        default-lease-time 3600; \n        filename \"pxelinux.0\"; \n        next-server 192.168.192.254; \n}\n```\n- 重启dhcpd服务：`systemctl restart dhcpd`\n- 检查dhcpd服务：`systemctl status dhcpd`\n\n7. 启用tftp服务\n- 进入文件： `vi /etc/xinetd.d/tftp`\n- 将disable的yes改成no\n- 重启tftp服务：`systemctl restart tftp.socket`\n- 检查tftp服务：`systemctl status tftp.socket`\n\n8. 拷贝PXE服务器的相关文件\n- 进入tftp的根目录：`cd /var/lib/tftpboot`\n- 引导文件：`cp /usr/share/syslinux/pxelinux.0 ./`\n- 菜单文件：`cp /usr/share/syslinux/menu.c32 ./`\n- 安装引导文件1：`cp /mnt/cdrom/isolinux/vmlinuz ./`\n- 安装- 引导文件2：`cp /mnt/cdrom/isolinux/initrd.img ./`\n\n9. 制作安装菜单\n- `mkdir /var/lib/tftpboot/pxelinux.cfg/`\n- `touch /var/lib/tftpboot/pxelinux.cfg/default`\n- 编辑default文件\n```php\ndefault menu.c32 \ntimeout 300 \nprompt 0 \n\nlabel 1 \nmenu label ^1) Install CentOS menu default \nkernel vmlinuz \nappend initrd=initrd.img method=http://192.168.192.254/CentOS ks=http://192.168.192.254/ks.cfg \n```\n\n10. 制作阿帕奇服务器\n- 重启http服务:`systemctl restart httpd`\n- 进入阿帕奇根目录: `cd /var/www/html`\n- 创建CentOS文件夹:`mkdir CentOS`\n- 挂载安装文件到该目录:`mount /dev/sr0 /var/www/html/CentOS`\n\n11. 制作ks.cfg\n- 根目录拷贝ks.cfg到服务器目录:`cp anaconda-ks.cfg /var/www/html/`\n- 改名:`mv anaconda-ks.cfg ks.cfg`\n- `chmod +r ks.cfg`浏览器访问能正常显示\n- 修改ks.cfg，或者图形化安装 `yum install system-config-kickstart -y` 打开再配置`system-config-kickstart`\n- [图形化教程](https://blog.csdn.net/xiaolinyouni/article/details/114014281)\n\n```php\n\n#version=DEVEL\n# System authorization information\nauth --useshadow --enablemd5\n# Install OS instead of upgrade\ninstall\n# Use CDROM installation media\n#cdrom\nurl --url http://192.168.192.254/CentOS\n# Use text mode install\ntext\n# Firewall configuration\nfirewall --enabled\nfirstboot --disable\nignoredisk --only-use=sda\n# Keyboard layouts\n# old format: keyboard us\n# new format:\nkeyboard --vckeymap=us --xlayouts='us'\n# System language\nlang en_US.UTF-8\n\n# Network information\nnetwork  --bootproto=dhcp --device=link --activate\nnetwork  --hostname=localhost.localdomain\n# Reboot after installation\nreboot\n# Root password\nrootpw --iscrypted $1$VrBVcEjp$CrZdLE.nC8WrUEkuSTBxK.\n# System services\nservices --enabled=\"chronyd\"\n# System timezone\ntimezone America/Los_Angeles --isUtc\n# X Window System configuration information\nxconfig  --startxonboot\n# System bootloader configuration\nbootloader --append=\" crashkernel=auto\" --location=mbr --boot-drive=sda\n# Clear the Master Boot Record\nzerombr\n# Partition clearing information\nclearpart --all --initlabel\n# Disk partitioning information\npart swap --fstype=\"swap\" --size=2048\npart /boot --fstype=\"xfs\" --size=300\npart / --fstype=\"xfs\" --size=18131\n\n%post\n/usr/sbin/adduser admin\n/usr/sbin/usermod -p '$1$VrBVcEjp$CrZdLE.nC8WrUEkuSTBxK.' admin\n/usr/bin/chfn -f \"CentOS7\" admin\nmv /etc/rc.d/rc.local /etc/rc.d/rc.local.00\necho '#!/bin/bash' > /etc/rc.d/rc.local\nln -s ../rc.local /etc/rc.d/rc5.d/S99rclocal\nchmod 755 /etc/rc.d/rc.local\necho 'mkdir -p /var/log/vmware' >> /etc/rc.d/rc.local\necho 'exec 1> /var/log/vmware/rc.local.log' >> /etc/rc.d/rc.local\necho 'exec 2>&1' >> /etc/rc.d/rc.local\necho 'set -x' >> /etc/rc.d/rc.local\necho 'echo Installing Open VM Tools' >> /etc/rc.d/rc.local\necho 'set -x' >> /etc/rc.d/rc.local\necho '/bin/eject sr0 || /bin/true' >> /etc/rc.d/rc.local\necho '/bin/eject sr1 || /bin/true' >> /etc/rc.d/rc.local\necho '/bin/vmware-rpctool' \\'guest.upgrader_send_cmd_line_args --default\\' >> /etc/rc.d/rc.local\necho '/bin/vmware-rpctool' \\'upgrader.setGuestFileRoot /tmp\\' >> /etc/rc.d/rc.local\necho '/bin/vmware-rpctool' \\'toolinstall.installerActive 1\\' >> /etc/rc.d/rc.local\necho '/bin/vmware-rpctool' \\'toolinstall.installerActive 100\\' >> /etc/rc.d/rc.local\necho 'rm -f /etc/rc.d/rc.local' >> /etc/rc.d/rc.local\necho 'rm -f /etc/rc.d/rc5.d/S99rclocal' >> /etc/rc.d/rc.local\necho 'mv /etc/rc.d/rc.local.00 /etc/rc.d/rc.local' >> /etc/rc.d/rc.local\n/bin/echo done\n%end\n\n%packages\n@base\n@core\n@desktop-debugging\n@dial-up\n@directory-client\n@fonts\n@gnome-desktop\n@guest-desktop-agents\n@input-methods\n@internet-browser\n@java-platform\n@multimedia\n@network-file-system-client\n@print-client\n@x11\nbinutils\nchrony\nftp\ngcc\nkernel-devel\nkexec-tools\nmake\nopen-vm-tools\npatch\npython\n\n%end\n\n%addon com_redhat_kdump --enable --reserve-mb='auto'\n\n%end\n\nreboot\n\n```\n-   重启http服务:`systemctl restart httpd`\n\n### 批量安装\n- 服务器连接PXE服务器局域网\n- 服务器设置PXE引导启动\n## H3C 服务器系统安装\n### 前言\n这次在H3C UniServer R4900 G5 批量安装RHEL 7.6。 因第一次接触前期准备使用PXE批量安装系统（只能做软Raid），但到现场实际发现厂商是有自己的管理平台批量安装的。\n\nH3C有硬件管理“HDM”、单机系统管理“iFist”、批量管理平台“Fist”，然后开始研究这三个平台。因服务器需要做硬Raid，硬Raid基于物理设备基于Riad卡。（相当于服务器不是直接识别硬盘而是被硬件做了Raid的单磁盘）后续研究该平台的Raid设置方式。\n\nFist平台尽量安装在服务器上，因这次安装时安装在win10上，批量安装时占用CPU很大。\n经过一段时间研究和试验，具体过程为：\n1. 进入HDM配置带外IP。\n2. 进入Fist添加管理服务器，配置“服务器配置模板”（用于批量系统安装）\n3. Riad配置（需在HDM获取Raid卡信息，可以单机配置或Fist批量设置）、系统配置（自定义设置，配置Ks应答文件，选择创建的Raid逻辑盘）\n4. 然后服务器配置模板应用开始批量安装（其实就是进入每台单机的iFist安装系统）\n\n### HDM配置带外IP\n配置HDM管理IP。由于是本地配置，没有留下照片截图，配置很简单。\n\n### Fist添加管理服务器\n![](https://r2.redcrew.cn/image/fa74f0dc41e1112a701ca4713629f066.png)\n### 上传系统镜像\n![](https://r2.redcrew.cn/image/190d9dd5918088d2fc99338150edcc5e.png)\n### 配置服务器模板\n![](https://r2.redcrew.cn/image/98293241f42a55a428dd627ce16871e9.png)\n![](https://r2.redcrew.cn/image/354f3b8ddef9242fb3f9378c1e8cc826.png)\n![](https://r2.redcrew.cn/image/04f0f1bb224fa3b608a1aeb4967217cb.png)\n### 服务器模板应用\n- 等待安装完成即可\n\n## Liunx网卡绑定\n[Liunx网卡绑定](https://redcrew.cn/posts/linux-bond)\n\n\n### 注意事项\n\nKs文件需要使用H3C的模板（因需要iFist驱动、Raid卡驱动相关命令），系统分区必须要必要的分区（可以使用图形化安装里磁盘手动分区得出需要的分区，在H3C Ks模板内调整）\n\n硬Raid建立好后有逻辑盘名称，Fist服务器配置模板选择后，Ks文件分区可以写 ' --ondisk=$disk '（自动选择给出的逻辑盘名称变量）\n\n---\n#linux \n"},{"title":"Obsidian使用情况","tags":["obsidian"],"categories":"Yr的分享","author":"YangRan","excerpt":"## 前言\n\n关于自己文字记录的过程，真的是可以长篇大论。从笔记本~~纸质的~~->记事本~~TXT~~->Office->OneNote&Notion->有道云笔记&语雀->Typora->Joplin（2021年舍弃）->Obsidian（至今）\n\n太过夸张~~真是一个善变的人~~甚至还有记录了一篇Joplin与Obsidian对比，当时还在狂吹Joplin，没想到打脸了。Obsidian我希望是自己最后一款笔记应用~~千万别打脸了~~，主要是换一个应用得花好几天甚至更长去搬迁美化等等~~自己醒醒吧时间是珍贵的~~。\n\n已这篇记录为证，别在~~善变了~~换了。好了，正文开始！\n","link":"/posts/obsidian-use","content":"## 前言\n\n关于自己文字记录的过程，真的是可以长篇大论。从笔记本~~纸质的~~->记事本~~TXT~~->Office->OneNote&Notion->有道云笔记&语雀->Typora->Joplin（2021年舍弃）->Obsidian（至今）\n\n太过夸张~~真是一个善变的人~~甚至还有记录了一篇Joplin与Obsidian对比，当时还在狂吹Joplin，没想到打脸了。Obsidian我希望是自己最后一款笔记应用~~千万别打脸了~~，主要是换一个应用得花好几天甚至更长去搬迁美化等等~~自己醒醒吧时间是珍贵的~~。\n\n已这篇记录为证，别在~~善变了~~换了。好了，正文开始！\n<!-- more -->\n\n## Obsidian介绍\n\n>[官网与简介](https://obsidian.md)\n>Sharpen your thinking.\n>Obsidian is the private and flexible writing app that adapts to the way you think.\n\n在网上众说纷纭，这里好哪里好等等。我只是觉得满足自己的需求即可。其实有很多模块与功能我自己基本不使用~~可能是我垃圾吧~~，一个颜控不在意那么多功能。\n\n当时为什么Joplin转战Obsidian，很大的因素就是在UI上其次是互联网上大佬反馈Obsidian数据存储更存粹~~我也不太懂~~。然后就是毅然决然打自己的脸用上了Obsidian。在这里我也推荐大家使用Obsidian呀~~哈哈哈~~！目前v1.5.11做的非常好了，丝滑！\n\n## Obsidian全局设置\n\n其实也没啥讲究的按需调整，单纯说一个“文件与链接”个人的配置习惯吧。\n- 内部链接类型：基于当前笔记的相对路径。\n- 附件默认存放路径：指定的附件文件夹。\n\n噢~字体我看惯Windows了，比较喜欢`微软雅黑`。\n\n全局设置还有一块关于“外观”的CSS个性的手搓内容。放在下面主题内容去记录。🔽\n\n## Obsidian主题设置\n\n我用的是[Aura](https://github.com/ashwinjadhav818/obsidian-aura)**v1.71**主题，为什么不用作者的最新版本？因为作者在**v1.75**时重写了主题，虽然主题内容风格没有大的改动，但是细节上的东西对于我来说不太喜欢。\n\n这里可以使用[Style Setting](https://github.com/mgmeyers/obsidian-style-settings)快捷设置主题相关内容~~其实也可以手搓CSS🫡~~。\n\n>Aurav1.71 Style Setting的设置文件\n\n```json fold file=style-settings.json\n{\n  \"aura@@aura-accent\": \"color-default\",\n  \"aura@@aura-colorshemes\": \"aura-colorschemes-dracula\",\n  \"aura@@bg-primary\": \"#202127\",\n  \"aura@@bg-secondary\": \"#202127\",\n  \"aura@@aura-active-line\": \"aura-no-highlight\",\n  \"aura@@aura-callouts-select\": \"default\",\n  \"aura@@aura-custom-checkbox\": true,\n  \"aura@@aura-rainbow-tags\": true,\n  \"aura@@h1-color\": \"#00F7FF\",\n  \"aura@@h2-color\": \"#00E1FF\",\n  \"aura@@h3-color\": \"#00CCFF\",\n  \"aura@@h4-color\": \"#00B7FF\",\n  \"aura@@h5-color\": \"#00A2FF\",\n  \"aura@@h6-color\": \"#008CFF\",\n  \"aura@@aura-layout-select\": \"aura-default-layout\",\n  \"aura@@aura-disable-borders\": true,\n  \"aura@@tab-outline-color\": \"#FFFFFF00\",\n  \"aura@@aura-card-radius\": 16,\n  \"aura@@aura-card-layout-fileexplorer\": true,\n  \"aura@@aura-workspace-background-image\": \"aura-workspace-background-image-tokoyo\",\n  \"aura@@aura-colorful-frame-opacity\": 1,\n  \"aura@@aura-rainbow-folders\": true\n}\n```\n\n>Obsidian全局CSS的设置文件\n\n```css fold file=Yr-userstyle_obsidian_v1.css\n/*相关字体颜色*/\n.theme-dark {\n\t--bold-color: #E91E63;\n\t--text-selection: #0080FF;\n}\n\n\n/*代码颜色*/\n.markdown-rendered code {\n    color: #53dfdd;\n\tbackground-color: #242424;\n}\n\n.cm-s-obsidian span.cm-inline-code {\n    color: #53dfdd;\n\tbackground-color: #242424;\n}\n\n/*全局表格样式*/\n\n/*基本样式*/\ntable {\n    width: 100%; /*表格宽度*/\n    max-width: 65em; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 15px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n}\ntable th,\ntable td {\n  height: 35px; /*统一每一行的默认高度*/\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\n\n\n/*表头样式*/\ntable thead {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: rgba(158,188,226,0.2); /*背景色*/\n}\n\n\n\ntable tbody tr:nth-child(2n) {\n    background: rgba(158,188,226,0.12); \n}\n\ntable tr:hover {\n    background: #efefef; \n}\n\n\ntable th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n}\n\n\n\ntable td:nth-child(1) {\n    white-space: nowrap; \n}\n\n\n\n[].slice.call(document.querySelectorAll('table')).forEach(function(el){\n    var wrapper = document.createElement('div');\n    wrapper.className = 'table-area';\n    el.parentNode.insertBefore(wrapper, el);\n    el.parentNode.removeChild(el);\n    wrapper.appendChild(el);\n})\n\n$(\"table\").wrap(\"<div class='table-area'></div>\");\n\n.table-area {\n    overflow: auto;\n}\n\n.markdown-rendered blockquote {\n    color: var(--blockquote-color);\n    font-style: var(--blockquote-font-style);\n    background-color: var(--blockquote-background-color);\n    border-left: var(--blockquote-border-thickness) solid var(--blockquote-border-color);\n    padding: 0 0 0 var(--size-4-6);\n    margin-inline-start: 0;\n    margin-inline-end: 0;\n}\n\n```\n\n### Obsidian界面效果\n\n这个效果自己相当满意，当然也从使用Obsidian时的默认->Minimal->AnuPpuccin\n->Aura一路捣鼓~~披荆斩棘~~弄成这样。\n\n![](https://r2.redcrew.cn/image/928d3fba24f9d2df897e9800ddbfe187.png)\n\n## Obsidian插件分享\n\n在这篇文章前，其实也有记录Obsidian使用情况。那会对插件之狂热，甚至一晚上都在搜寻各种好玩的插件。翻回那篇记录看了下30多个插件😅。\n\n在某个时间突然想通，开始整理装了就没咋用的插件。整理到现在只留下了6个！\n### Remotely Save\n[Remotely Save](https://github.com/remotely-save/remotely-save)顾名思义远程保存的插件，其实就是一个非官方的非官方同步插件。为什么不用官方的这个有得起另外篇记录谈起了😂。插件设置很简单支持Amazon S3 or S3-compatible(Cloudflare R2 / BackBlaze B2 / MinIO / ...)、 Dropbox、 OneDrive for personal、Webdav。\n\n我用的Webdav，服务端在家里。使用要特别注意的就是同步时不用去动服务端文件，为啥会动~~当时抽风了~~然后多端的也在定时同步，搞出了文件误删的事情，当时服务端文件还没做自动备份百度网盘，一下没了好多。😑\n### Style Setting\n\n[Style Setting](https://github.com/mgmeyers/obsidian-style-settings)适配较多主题的CSS可视化编辑，DIY主题样式。具体使用可以见上面“Aurav1.71 Style Setting的设置文件”\n### Bartender\n\n[Bartender](https://github.com/nothingislost/obsidian-bartender)可以重新排列状态栏和侧栏带、文件列表中的元素。官方没有文件列表自定义排序，使用Bartender手动拖拽实现文件列表自定义排序。\n### Image Auto Upload Plugin\n\n[Image Auto Upload Plugin](https://github.com/renmu123/obsidian-image-auto-upload-plugin)可将图片直接拖入Obsidian中，并调用Picgo会自动完成上传功能。\n\n### Awesome Image\n\n[Awesome Image](https://github.com/AwesomeDog/obsidian-awesome-image)我主要使用他的图片预览功能，可以避免Obsidian无法放大缩小查看图片的缺陷。\n\n### Mindmap NextGen\n\n[Mindmap NextGen](https://github.com/james-tindal/obsidian-mindmap-nextgen)看标题也知道是干嘛的了，使用 [Markmap](https://markmap.js.org/) 以思维导图的形式查看笔记。\n\n### Codeblock Customizer\n\n[Codeblock Customizer](https://github.com/mugiwara85/CodeblockCustomizer)可以充分自定义代码块样式，其实我使用到的功能仅限于当前行高亮显示与半折叠代码块。\n\n🙋‍♂️🌰：\n![](https://r2.redcrew.cn/image/4e53e3bee3ea12e277729fbc6514f9f5.png)\n\n\n\n---\n#obsidian \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"这里开始","tags":["日记"],"categories":"Yr的日记","author":"YangRan","excerpt":"\n## 涉猎\n\n某一天的早餐时间，浑浑噩噩的刷网页~~探索稀奇~~，发现了“云游君”这位有趣的大佬。他的博客让我眼前一亮怎么可以做的的这么舒服~~审美一致~~，于是又开始捣鼓了起来。\n","link":"/posts/start-here","content":"\n## 涉猎\n\n某一天的早餐时间，浑浑噩噩的刷网页~~探索稀奇~~，发现了“云游君”这位有趣的大佬。他的博客让我眼前一亮怎么可以做的的这么舒服~~审美一致~~，于是又开始捣鼓了起来。\n<!-- more -->\n\n## 记录与发布\n\n由于习惯我的文字是随机记录的，通常都是在最后预计不会大变动后才会总结和重新排版。在日常我并不经常使用~~IDE~~，而是使用[Obsidian](https://obsidian.md)这就导致了两边文件来回切换粘贴复制。因为~~自己总觉得这个记录完结了~~傻了吧唧🥲~~\n\n然后看着这套~~傻逼~~麻烦的操作，想到了在Window上实现文件镜像“mklink”~~可以在CMD实现，一个字麻烦~~然后找到一个软件[LSE(linkshellextension)](https://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html)直接右键实现。\n\n这里我用到“LSE”的“目录连接点”将posts文件夹链接到了Obsidian的同步文件夹，正常使用Obsidian编辑文件时将会镜像同步更改。这样就实现了我只是在每次想起时去IDE推送下即可。~~大快人心~~\n\n## 搬迁事宜\n\n打算将Typecho的内容🚚~~搬迁~~到这里，在一个🕦🌧️~~下雨的夜晚~~开始了代号为🅰️的行动。\n\n行动过程算是轻松，毕竟都是MD文件。行动完成后满心欢喜的打开浏览器查看成果，咦~真~~TM~~丑，为什么呢？百思不得其解，在郁闷了1秒后返回了“云游君”哪里去看了看。找到问题了！审美变了~~没想到对文章排版的审美也变了~~回看Typecho的页面，一个字丑！\n\n最终还是放弃了行动，为什么呢？懒不行改格式了，等后续想到某篇文章在回头修改格式发布吧！呼\\~🐌~~懒癌上线~~\n\n## 装修事宜\n\n因自己~~傻逼~~强迫症站点的前端显示要与Obsidian样式一致，又把两者不同点整改了下。\n1. 站点的文字颜色（黑暗模式~~不用亮色模式~~）与Obsidian包浆的样式（[Obsidian个人使用情况准备写到这里](https://redcrew.cn/posts/obsidian-use)）做到了一致。\n2. 站点文字代码折叠。\n3. 站点首页简化。\n4. 站点搜索精确度。\n5. 加入了云游君的[空调房](https://redcrew.cn/air-conditioner-room)。\n不会开发的我也只是CopyCopy。👻\n\n\n\n\n::: tip\n未完待续\n:::\n\n---\n#日记\n\n\n\n\n\n"}]
